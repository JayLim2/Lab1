package client;

import models.Author;
import models.AuthorsContainer;
import models.Book;
import models.YearOutOfBoundsException;
import protocol.*;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Main {
    private static Socket clientSocket;
    private static OutputStream out;
    private static InputStream in;
    private static Marshaller commandMarshaller;
    private static JAXBContext contextCommands;
    private static XMLInputFactory xmi;
    private static XMLEventReader xer;

    //–ü—Ä–∏–º–µ—Ä –æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∏–¥–∞–º –∫–æ–º–∞–Ω–¥
    public static void main(String[] args) {
        try {
            clientSocket = new Socket(InetAddress.getLocalHost(), 4444);
            out = clientSocket.getOutputStream();
            in = clientSocket.getInputStream();

            contextCommands = JAXBContext.newInstance(CommandPacket.class, AddBookPacket.class, ViewBooksPacket.class, SetBookPacket.class);
            commandMarshaller = contextCommands.createMarshaller();
            xmi = XMLInputFactory.newFactory();

            //======================== VIEW BOOK ==============================
            try {
                viewBooks();
            } catch (XMLStreamException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            //======================== ADD BOOK ==============================
            try {
                Book book = new Book("test", null, 1234, "somedude", "a test book");
                addBook(book);
                book = new Book("test111", null, 1234, "somedude", "a test book");
                editBook(0, book);
                Book.resetId();
                Author.resetId();
                viewBooks();
                
            } catch (XMLStreamException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (YearOutOfBoundsException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            //======================== VIEW BOOK ==============================
//            try {
//              //  viewBooks();
//            } catch (XMLStreamException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//            }

            //======================== EDIT BOOK ==============================
//            try {
//                
//            } catch (XMLStreamException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (YearOutOfBoundsException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//            }

            //======================== VIEW BOOK ==============================
            /*try {
                viewBooks();
            } catch (XMLStreamException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }*/

            //======================================================================
            in.close();
            out.close();
            clientSocket.close();
        } catch (UnknownHostException e) {
            System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç.");
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞.");
            e.printStackTrace();
        } catch (JAXBException e) {
            System.out.println("–û—à–∏–±–∫–∞ XML-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.");
            e.printStackTrace();
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã VIEW_BOOKS
     *
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void viewBooks() throws JAXBException, XMLStreamException {
        //====================== VIEW BOOKS ==============================
        ViewBooksPacket currentCommand = new ViewBooksPacket(Commands.VIEW_BOOKS);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class, ViewBooksResponsePacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É VIEW BOOKS.");
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof ViewBooksResponsePacket) {
            ViewBooksResponsePacket viewBooksResponsePacket = (ViewBooksResponsePacket) response;

            AuthorsContainer authorsContainer = viewBooksResponsePacket.getAuthorsContainer();
            List<Author> authors = authorsContainer.getAuthors();
            System.out.printf("%4s %30s %5s %15s %25s%n", "#", "Title", "Year", "Publisher", "Brief");
            for (Author author : authors) {
                List<Book> books = author.getBooks();
                for (Book book : books) {
                    System.out.printf("%4d %30s %5d %15s %25s%n", book.getId(), book.getTitle(), book.getPublishYear(), book.getPublisher(), book.getBrief());
                }
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã ADD_BOOK [DATA]
     * @param book
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void addBook(Book book) throws JAXBException, XMLStreamException {
        AddBookPacket currentCommand = new AddBookPacket(Commands.ADD_BOOK, 0, book);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();
        Book.resetId();
        Author.resetId();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ADD BOOK.\n");
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof OkPacket) {
            System.out.println("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã SET_BOOK [DATA] by ID
     * @param id
     * @param book
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void editBook(int id, Book book) throws JAXBException, XMLStreamException {
        SetBookPacket currentCommand = new SetBookPacket(Commands.SET_BOOK, 0, 0, book);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();
        Book.resetId();
        Author.resetId();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É EDIT BOOK.\n");
            System.out.println(((ErrorPacket) response).getDescription());
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof OkPacket) {
            System.out.println("–ö–Ω–∏–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã REMOVE_BOOK by ID
     *
     * @param id
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void deleteBook(int id) throws JAXBException, XMLStreamException {
        RemoveBookPacket currentCommand = new RemoveBookPacket(Commands.REMOVE_BOOK, id);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();
        Book.resetId();
        Author.resetId();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É DELETE BOOK.\n");
            System.out.println(((ErrorPacket) response).getDescription());
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof OkPacket) {
            System.out.println("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n");
        }
    }

    //-------------------------------

    /**
     * FIXME 25.12.17
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã VIEW_AUTHORS
     *
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void viewAuthors() throws JAXBException, XMLStreamException {
        //–ø–æ–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–∞–∫ VIEW_BOOKS
        ViewBooksPacket currentCommand = new ViewBooksPacket(Commands.VIEW_BOOKS);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class, ViewBooksResponsePacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É VIEW BOOKS.");
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof ViewBooksResponsePacket) {
            ViewBooksResponsePacket viewBooksResponsePacket = (ViewBooksResponsePacket) response;

            AuthorsContainer authorsContainer = viewBooksResponsePacket.getAuthorsContainer();
            List<Author> authors = authorsContainer.getAuthors();
            System.out.printf("%4s %15s %15s%n", "#", "Author name", "Count of books");
            for (Author author : authors) {
                System.out.printf("%4d %15s %15d%n", author.getId(), author.getName(), author.getBooks().size());
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã ADD_AUTHOR [DATA]
     *
     * @param authorName
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void addAuthor(String authorName) throws JAXBException, XMLStreamException {
        Author author = new Author(authorName);
        AddAuthorPacket currentCommand = new AddAuthorPacket(Commands.ADD_AUTHOR, author);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();
        //Book.resetId();
        //Author.resetId();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ADD AUTHOR.\n");
            System.out.println(((ErrorPacket) response).getDescription());
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof OkPacket) {
            System.out.println("–ê–≤—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.\n");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã SET_AUTHOR [NEW_DATA] by ID
     *
     * @param id
     * @param authorName
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void editAuthor(int id, String authorName) throws JAXBException, XMLStreamException {
        Author author = new Author(authorName);
        SetAuthorPacket currentCommand = new SetAuthorPacket(Commands.SET_AUTHOR, id, author);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();
        //Book.resetId();
        //Author.resetId();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É SET AUTHOR.\n");
            System.out.println(((ErrorPacket) response).getDescription());
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof OkPacket) {
            System.out.println("–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.\n");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã REMOVE_AUTHOR by ID
     *
     * @param id
     * @throws JAXBException
     * @throws XMLStreamException
     */
    public static void deleteAuthor(int id) throws JAXBException, XMLStreamException {
        RemoveAuthorPacket currentCommand = new RemoveAuthorPacket(Commands.REMOVE_AUTHOR, id);

        JAXBContext contextResponsePacket = JAXBContext.newInstance(ResponsePacket.class, OkPacket.class, ErrorPacket.class);
        Unmarshaller unmarshResponsePacket = contextResponsePacket.createUnmarshaller();

        commandMarshaller.marshal(currentCommand, out);

        xer = xmi.createXMLEventReader(in);
        xer.nextEvent();
        xer.peek();
        //Book.resetId();
        //Author.resetId();

        ResponsePacket response = (ResponsePacket) unmarshResponsePacket.unmarshal(xer);
        System.out.println("Response accepted.\n");

        //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if (response instanceof ErrorPacket) {
            System.out.println("–û–®–?–ë–ö–ê: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É REMOVE AUTHOR.\n");
            System.out.println(((ErrorPacket) response).getDescription());
        }

        //–ï—Å–ª–∏ –≤—Å—ë –æ–∫
        if (response instanceof OkPacket) {
            System.out.println("–ê–≤—Ç–æ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.\n");
        }
    }
}
